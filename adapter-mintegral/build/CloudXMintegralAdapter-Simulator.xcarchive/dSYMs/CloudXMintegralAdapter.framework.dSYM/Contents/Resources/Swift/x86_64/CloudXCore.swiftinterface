// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name CloudXCore
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AdSupport
import AppTrackingTransparency
import Combine
import CoreData
import CoreLocation
import CoreTelephony
import Foundation
import SafariServices
import StoreKit
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@objc public enum CloudXBannerType : Swift.Int {
  case w320h50 = 0
  case mrec = 1
  public var size: CoreFoundation.CGSize {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CloudXBannerAdView : UIKit.UIView, CloudXCore.CloudXAd {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any CloudXCore.CloudXBannerDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc public var isReady: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var suspendPreloadWhenInvisible: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMoveToSuperview()
  @_Concurrency.MainActor @preconcurrency @objc public func load()
  @_Concurrency.MainActor @preconcurrency @objc public func destroy()
  @objc deinit
}
extension CloudXCore.CloudXBannerAdView : CloudXCore.AdapterBannerDelegate {
  @_Concurrency.MainActor @preconcurrency public func didLoad(banner: any CloudXCore.AdapterBanner)
  @_Concurrency.MainActor @preconcurrency public func failToLoad(banner: (any CloudXCore.AdapterBanner)?, error: (any Swift.Error)?)
  @_Concurrency.MainActor @preconcurrency public func didShow(banner: any CloudXCore.AdapterBanner)
  @_Concurrency.MainActor @preconcurrency public func impression(banner: any CloudXCore.AdapterBanner)
  @_Concurrency.MainActor @preconcurrency public func click(banner: any CloudXCore.AdapterBanner)
}
public protocol SKAdNetworkConstants {
  var skadPlistIds: [Swift.String]? { get }
  var versions: [Swift.String] { get }
  var sourceApp: Swift.String { get }
}
public protocol AdapterRewarded : CloudXCore.Destroyable, CloudXCore.StatusCheck {
  var delegate: (any CloudXCore.AdapterRewardedDelegate)? { get set }
  var sdkVersion: Swift.String { get }
  var network: Swift.String { get }
  var bidID: Swift.String { get }
  func load()
  func show(from viewController: UIKit.UIViewController)
}
public protocol AdapterRewardedDelegate : AnyObject {
  func didLoad(rewarded: any CloudXCore.AdapterRewarded)
  func didFailToLoad(rewarded: any CloudXCore.AdapterRewarded, error: any Swift.Error)
  func didShow(rewarded: any CloudXCore.AdapterRewarded)
  func impression(rewarded: any CloudXCore.AdapterRewarded)
  func didClose(rewarded: any CloudXCore.AdapterRewarded)
  func didFailToShow(rewarded: any CloudXCore.AdapterRewarded, error: any Swift.Error)
  func click(rewarded: any CloudXCore.AdapterRewarded)
  func expired(rewarded: any CloudXCore.AdapterRewarded)
  func userReward(rewarded: any CloudXCore.AdapterRewarded)
}
public protocol AdapterRewardedFactory : CloudXCore.AdFactory, CloudXCore.Instanciable {
  func create(adId: Swift.String, bidId: Swift.String, adm: Swift.String, extras: [Swift.String : Swift.String], delegate: any CloudXCore.AdapterRewardedDelegate) -> (any CloudXCore.AdapterRewarded)?
}
public enum CloudXNativeTemplate : Swift.String, Swift.Decodable {
  case small
  case medium
  public var size: CoreFoundation.CGSize {
    get
  }
  public var view: any CloudXCore.CloudXBaseNativeView {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CloudXNativeAdView : UIKit.UIView, CloudXCore.CloudXAd {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any CloudXCore.CloudXNativeDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc public var isReady: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var suspendPreloadWhenInvisible: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMoveToSuperview()
  @_Concurrency.MainActor @preconcurrency @objc public func load()
  @_Concurrency.MainActor @preconcurrency @objc public func destroy()
  @objc deinit
}
extension CloudXCore.CloudXNativeAdView : CloudXCore.AdapterNativeDelegate {
  @_Concurrency.MainActor @preconcurrency public func didLoad(native: any CloudXCore.AdapterNative)
  @_Concurrency.MainActor @preconcurrency public func failToLoad(native: (any CloudXCore.AdapterNative)?, error: (any Swift.Error)?)
  @_Concurrency.MainActor @preconcurrency public func didShow(native: any CloudXCore.AdapterNative)
  @_Concurrency.MainActor @preconcurrency public func impression(native: any CloudXCore.AdapterNative)
  @_Concurrency.MainActor @preconcurrency public func click(native: any CloudXCore.AdapterNative)
}
public protocol BidderConfig {
  var initData: [Swift.String : Swift.String] { get }
  var networkName: Swift.String { get }
}
@_hasMissingDesignatedInitializers public class CloudX {
  @objc public var userID: Swift.String?
  @objc public var isInitialised: Swift.Bool {
    @objc get
  }
  public static let shared: CloudXCore.CloudX
  public var sdkVersion: Swift.String {
    get
  }
  public func initSDK(appKey: Swift.String) async throws -> Swift.Bool
  public func initSDK(appKey: Swift.String, completion: ((Swift.Bool, CloudXCore.CloudXError?) -> Swift.Void)?)
  @objc deinit
}
extension CloudXCore.CloudX {
  public func createBanner(placement: Swift.String, viewController: UIKit.UIViewController, delegate: (any CloudXCore.CloudXBannerDelegate)? = nil) -> CloudXCore.CloudXBannerAdView?
  public func createMREC(placement: Swift.String, viewController: UIKit.UIViewController, delegate: (any CloudXCore.CloudXBannerDelegate)? = nil) -> CloudXCore.CloudXBannerAdView?
  public func createInterstitial(placement: Swift.String, delegate: (any CloudXCore.CloudXInterstitialDelegate)? = nil) -> (any CloudXCore.CloudXInterstitial)?
  public func createRewarded(placement: Swift.String, delegate: (any CloudXCore.CloudXRewardedDelegate)?) -> (any CloudXCore.CloudXRewardedInterstitial)?
  public func createNativeAd(placement: Swift.String, viewController: UIKit.UIViewController, delegate: (any CloudXCore.CloudXNativeDelegate)?) -> CloudXCore.CloudXNativeAdView?
}
public protocol CloudXBaseNativeView {
  var title: Swift.String? { get set }
  var descriptionText: Swift.String? { get set }
  var callToActionText: Swift.String? { get set }
  var appIcon: UIKit.UIImage? { get set }
  var mainImage: UIKit.UIImage? { get set }
  var cta: (() -> Swift.Void)? { get set }
  var ctaView: UIKit.UIView? { get }
  var titleView: UIKit.UIView? { get }
  var descriptionView: UIKit.UIView? { get }
  var iconView: UIKit.UIView? { get }
  var mainImageView: UIKit.UIView? { get }
  var customMediaView: UIKit.UIView? { get set }
}
infix operator === : DefaultPrecedence
public protocol AdapterBanner : CloudXCore.Destroyable {
  var delegate: (any CloudXCore.AdapterBannerDelegate)? { get set }
  var timeout: Swift.Bool { get set }
  var bannerView: UIKit.UIView? { get }
  var sdkVersion: Swift.String { get }
  func load()
}
public protocol AdapterBannerDelegate : AnyObject {
  func didLoad(banner: any CloudXCore.AdapterBanner)
  func failToLoad(banner: (any CloudXCore.AdapterBanner)?, error: (any Swift.Error)?)
  func didShow(banner: any CloudXCore.AdapterBanner)
  func impression(banner: any CloudXCore.AdapterBanner)
  func click(banner: any CloudXCore.AdapterBanner)
}
public protocol AdapterBannerFactory : CloudXCore.AdFactory, CloudXCore.Instanciable {
  @_Concurrency.MainActor func create(viewController: UIKit.UIViewController, type: CloudXCore.CloudXBannerType, adId: Swift.String, bidId: Swift.String, adm: Swift.String, extras: [Swift.String : Swift.String], delegate: any CloudXCore.AdapterBannerDelegate) -> (any CloudXCore.AdapterBanner)?
}
public typealias HTTPParameters = [Swift.String : Any]
public typealias HTTPHeaders = [Swift.String : Swift.String]
public typealias HTTPURLParameters = [Swift.String : Swift.String]
@_hasMissingDesignatedInitializers final public class CloudXTargeting {
  public enum CloudXGender : Swift.String {
    case male
    case female
    case other
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public static var shared: CloudXCore.CloudXTargeting
  final public var userID: Swift.String?
  final public var age: Swift.Int?
  final public var yob: Swift.Int?
  final public var gender: CloudXCore.CloudXTargeting.CloudXGender?
  final public var keywords: [Swift.String]?
  final public var data: [Swift.String : Swift.String]?
  @objc deinit
}
extension CloudXCore.CloudXTargeting.CloudXGender : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol BidTokenSource : CloudXCore.Instanciable {
  func getToken() async throws -> [Swift.String : Swift.String]
}
@objc public protocol CloudXAd : CloudXCore.Destroyable, CloudXCore.StatusCheck {
  @objc func load()
}
@objc public protocol BaseAdDelegate {
  @objc func didLoad(ad: any CloudXCore.CloudXAd)
  @objc func failToLoad(ad: any CloudXCore.CloudXAd, with error: any Swift.Error)
  @objc func didShow(ad: any CloudXCore.CloudXAd)
  @objc func failToShow(ad: any CloudXCore.CloudXAd, with error: any Swift.Error)
  @objc func didHide(ad: any CloudXCore.CloudXAd)
  @objc func didClick(on ad: any CloudXCore.CloudXAd)
  @objc func impression(on ad: any CloudXCore.CloudXAd)
}
@objc public protocol CloudXInterstitialDelegate : CloudXCore.BaseAdDelegate {
}
@objc public protocol CloudXRewardedDelegate : CloudXCore.BaseAdDelegate {
  @objc func userRewarded(ad: any CloudXCore.CloudXAd)
  @objc func rewardedVideoStarted(ad: any CloudXCore.CloudXAd)
  @objc func rewardedVideoCompleted(ad: any CloudXCore.CloudXAd)
}
@objc public protocol CloudXBannerDelegate : CloudXCore.BaseAdDelegate {
}
@objc public protocol CloudXNativeDelegate : CloudXCore.BaseAdDelegate {
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class CloudXSmallNativeView : UIKit.UIView, CloudXCore.CloudXBaseNativeView {
  @_Concurrency.MainActor @preconcurrency final public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var descriptionText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var callToActionText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var appIcon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var mainImage: UIKit.UIImage?
  @_Concurrency.MainActor @preconcurrency final public var ctaView: UIKit.UIView? {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public var descriptionView: UIKit.UIView? {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public var titleView: UIKit.UIView? {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public var iconView: UIKit.UIView? {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public var mainImageView: UIKit.UIView? {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public var customMediaView: UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency final public var cta: (() -> Swift.Void)?
  @objc deinit
}

@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class CloudXMediumNativeView : UIKit.UIView, CloudXCore.CloudXBaseNativeView {
  @_Concurrency.MainActor @preconcurrency final public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var descriptionText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var callToActionText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var appIcon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var mainImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var mediaViewContainer: UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency final public var ctaView: UIKit.UIView? {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public var descriptionView: UIKit.UIView? {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public var titleView: UIKit.UIView? {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public var iconView: UIKit.UIView? {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public var mainImageView: UIKit.UIView? {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public var cta: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency final public var customMediaView: UIKit.UIView? {
    get
    set
  }
  @objc deinit
}

public struct NativeAdRequirements : Swift.Encodable {
  public enum NativeImageAssetID : Swift.Int {
    case main
    case icon
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum NativeDataAssetID : Swift.Int {
    case ctaTitle
    case description
    case rating
    case sponsored
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum NativeTitleAssetID : Swift.Int {
    case title
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum NativeVideoAssetID : Swift.Int {
    case video
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum NativeAdType {
    case small
    case medium
    case unknown
    public static func == (a: CloudXCore.NativeAdRequirements.NativeAdType, b: CloudXCore.NativeAdRequirements.NativeAdType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(assets: [CloudXCore.NativeAdRequirements.Asset], context: CloudXCore.NativeAdRequirements.NativeAdContext, privacy: Swift.Int, plcmttype: CloudXCore.NativeAdRequirements.PlacementType? = nil, eventtrackers: [CloudXCore.NativeAdRequirements.EventTracker]? = nil)
  public static var smallNativeRequest: CloudXCore.NativeAdRequirements {
    get
  }
  public static var mediumNativeRequest: CloudXCore.NativeAdRequirements {
    get
  }
  public enum NativeAdContext : Swift.Int, Swift.Encodable {
    case content
    case social
    case product
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum PlacementType : Swift.Int, Swift.Encodable {
    case infeed
    case atomic
    case bannerStyle
    case widget
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public struct Asset : Swift.Encodable {
    public struct Img : Swift.Encodable {
      public enum ImageType : Swift.Int, Swift.Encodable {
        case icon
        case main
        public init?(rawValue: Swift.Int)
        public typealias RawValue = Swift.Int
        public var rawValue: Swift.Int {
          get
        }
      }
      public func encode(to encoder: any Swift.Encoder) throws
    }
    public struct Title : Swift.Encodable {
      public func encode(to encoder: any Swift.Encoder) throws
    }
    public struct Video : Swift.Encodable {
      public func encode(to encoder: any Swift.Encoder) throws
    }
    public struct Data : Swift.Encodable {
      public enum DataType : Swift.Int, Swift.Encodable {
        case sponsored
        case desc
        case rating
        case likes
        case downloads
        case price
        case saleprice
        case phone
        case address
        case desc2
        case displayurl
        case ctatext
        public init?(rawValue: Swift.Int)
        public typealias RawValue = Swift.Int
        public var rawValue: Swift.Int {
          get
        }
      }
      public func encode(to encoder: any Swift.Encoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
  }
  public struct EventTracker : Swift.Encodable {
    public func encode(to encoder: any Swift.Encoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
}
extension Swift.Array {
  public func associateBy<Key>(_ selectKey: (Element) -> Key) -> [Key : Element] where Key : Swift.Hashable
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CloudXPrivacy : ObjectiveC.NSObject {
  @objc public static var hasUserConsent: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public static var isAgeRestrictedUser: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public static var isDoNotSell: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public static var isUserConsentSet: Swift.Bool {
    get
  }
  @objc public static var isAgeRestrictedUserSet: Swift.Bool {
    get
  }
  @objc public static var isDoNotSellSet: Swift.Bool {
    get
  }
  @objc public static var usPrivacyString: Swift.String? {
    @objc get
  }
  @objc deinit
}
public protocol CloudXFullscreenAd : CloudXCore.CloudXAd {
  func show(from viewController: UIKit.UIViewController)
}
public protocol CloudXInterstitial : CloudXCore.CloudXFullscreenAd {
  var interstitialDelegate: (any CloudXCore.CloudXInterstitialDelegate)? { get set }
}
public protocol CloudXRewardedInterstitial : CloudXCore.CloudXFullscreenAd {
  var rewardedDelegate: (any CloudXCore.CloudXRewardedDelegate)? { get set }
}
public protocol AdapterInterstitial : CloudXCore.Destroyable, CloudXCore.StatusCheck {
  var delegate: (any CloudXCore.AdapterInterstitialDelegate)? { get set }
  var sdkVersion: Swift.String { get }
  var network: Swift.String { get }
  var bidID: Swift.String { get }
  func load()
  func show(from viewController: UIKit.UIViewController)
}
public protocol AdapterInterstitialDelegate : AnyObject {
  func didLoad(interstitial: any CloudXCore.AdapterInterstitial)
  func didFailToLoad(interstitial: any CloudXCore.AdapterInterstitial, error: any Swift.Error)
  func didShow(interstitial: any CloudXCore.AdapterInterstitial)
  func didFailToShow(interstitial: any CloudXCore.AdapterInterstitial, error: any Swift.Error)
  func impression(interstitial: any CloudXCore.AdapterInterstitial)
  func didClose(interstitial: any CloudXCore.AdapterInterstitial)
  func click(interstitial: any CloudXCore.AdapterInterstitial)
  func expired(interstitial: any CloudXCore.AdapterInterstitial)
}
public protocol AdapterInterstitialFactory : CloudXCore.AdFactory, CloudXCore.Instanciable {
  func create(adId: Swift.String, bidId: Swift.String, adm: Swift.String, extras: [Swift.String : Swift.String], delegate: any CloudXCore.AdapterInterstitialDelegate) -> (any CloudXCore.AdapterInterstitial)?
}
public enum CloudXError : Swift.Int, Swift.Error {
  case failToInitSDK
  case sdkInitialisationInProgress
  case generalAdError
  case bannerViewError
  case nativeViewError
  case invalidPlacement
  case noAdsLoaded
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension CloudXCore.CloudXError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol AdFactory {
}
@objc public protocol Destroyable {
  @objc func destroy()
}
@objc public protocol StatusCheck {
  @objc var isReady: Swift.Bool { get }
}
public protocol AdapterNative : CloudXCore.Destroyable {
  var delegate: (any CloudXCore.AdapterNativeDelegate)? { get set }
  var timeout: Swift.Bool { get set }
  var nativeView: UIKit.UIView? { get }
  var sdkVersion: Swift.String { get }
  func load()
}
public protocol AdapterNativeDelegate : AnyObject {
  func didLoad(native: any CloudXCore.AdapterNative)
  func failToLoad(native: (any CloudXCore.AdapterNative)?, error: (any Swift.Error)?)
  func didShow(native: any CloudXCore.AdapterNative)
  func impression(native: any CloudXCore.AdapterNative)
  func click(native: any CloudXCore.AdapterNative)
}
public protocol AdapterNativeFactory : CloudXCore.AdFactory, CloudXCore.Instanciable {
  @_Concurrency.MainActor func create(viewController: UIKit.UIViewController, type: CloudXCore.CloudXNativeTemplate, adId: Swift.String, bidId: Swift.String, adm: Swift.String, extras: [Swift.String : Swift.String], delegate: any CloudXCore.AdapterNativeDelegate) -> (any CloudXCore.AdapterNative)?
}
public protocol Instanciable {
  static func createInstance() -> Self
}
public protocol AdNetworkInitializer : AnyObject, CloudXCore.Instanciable {
  static var isInitialized: Swift.Bool { get }
  func initialize(config: (any CloudXCore.BidderConfig)?) async throws -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc(AppSessionModel) public class AppSessionModel : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension CloudXCore.AppSessionModel {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<CloudXCore.AppSessionModel>
  @objc @NSManaged dynamic public var appKey: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var duration: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var url: Foundation.URL? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var metrics: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var performanceMetrics: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension CloudXCore.AppSessionModel {
  @objc(addMetricsObject:) @NSManaged dynamic public func addToMetrics(_ value: CloudXCore.SessionMetricModel)
  @objc(removeMetricsObject:) @NSManaged dynamic public func removeFromMetrics(_ value: CloudXCore.SessionMetricModel)
  @objc(addMetrics:) @NSManaged dynamic public func addToMetrics(_ values: Foundation.NSSet)
  @objc(removeMetrics:) @NSManaged dynamic public func removeFromMetrics(_ values: Foundation.NSSet)
}
extension CloudXCore.AppSessionModel {
  @objc(addPerformanceMetricsObject:) @NSManaged dynamic public func addToPerformanceMetrics(_ value: CloudXCore.PerformanceMetricModel)
  @objc(removePerformanceMetricsObject:) @NSManaged dynamic public func removeFromPerformanceMetrics(_ value: CloudXCore.PerformanceMetricModel)
  @objc(addPerformanceMetrics:) @NSManaged dynamic public func addToPerformanceMetrics(_ values: Foundation.NSSet)
  @objc(removePerformanceMetrics:) @NSManaged dynamic public func removeFromPerformanceMetrics(_ values: Foundation.NSSet)
}
extension CloudXCore.AppSessionModel : Swift.Identifiable {
  public typealias ID = Swift.String?
}
@_inheritsConvenienceInitializers @objc(InitMetricsModel) public class InitMetricsModel : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension CloudXCore.InitMetricsModel {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<CloudXCore.InitMetricsModel>
  @objc @NSManaged dynamic public var appKey: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var endedAt: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var startedAt: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var success: Swift.Bool {
    @objc get
    @objc set
  }
}
extension CloudXCore.InitMetricsModel : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(PerformanceMetricModel) public class PerformanceMetricModel : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension CloudXCore.PerformanceMetricModel {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<CloudXCore.PerformanceMetricModel>
  @objc @NSManaged dynamic public var adLoadCount: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var adLoadLatency: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var bidRequestLatency: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var bidResponseCount: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var clickCount: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var closeCount: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var closeLatency: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var failToLoadAdCount: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var impressionCount: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var placementID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var session: CloudXCore.AppSessionModel? {
    @objc get
    @objc set
  }
}
extension CloudXCore.PerformanceMetricModel : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(SessionMetricModel) public class SessionMetricModel : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension CloudXCore.SessionMetricModel {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<CloudXCore.SessionMetricModel>
  @objc @NSManaged dynamic public var placementID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var value: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var session: CloudXCore.AppSessionModel? {
    @objc get
    @objc set
  }
}
extension CloudXCore.SessionMetricModel : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension CloudXCore.CloudXBannerType : Swift.Equatable {}
extension CloudXCore.CloudXBannerType : Swift.Hashable {}
extension CloudXCore.CloudXBannerType : Swift.RawRepresentable {}
extension CloudXCore.CloudXNativeTemplate : Swift.Equatable {}
extension CloudXCore.CloudXNativeTemplate : Swift.Hashable {}
extension CloudXCore.CloudXNativeTemplate : Swift.RawRepresentable {}
extension CloudXCore.CloudXTargeting.CloudXGender : Swift.Equatable {}
extension CloudXCore.CloudXTargeting.CloudXGender : Swift.Hashable {}
extension CloudXCore.CloudXTargeting.CloudXGender : Swift.RawRepresentable {}
extension CloudXCore.NativeAdRequirements.NativeImageAssetID : Swift.Equatable {}
extension CloudXCore.NativeAdRequirements.NativeImageAssetID : Swift.Hashable {}
extension CloudXCore.NativeAdRequirements.NativeImageAssetID : Swift.RawRepresentable {}
extension CloudXCore.NativeAdRequirements.NativeDataAssetID : Swift.Equatable {}
extension CloudXCore.NativeAdRequirements.NativeDataAssetID : Swift.Hashable {}
extension CloudXCore.NativeAdRequirements.NativeDataAssetID : Swift.RawRepresentable {}
extension CloudXCore.NativeAdRequirements.NativeTitleAssetID : Swift.Equatable {}
extension CloudXCore.NativeAdRequirements.NativeTitleAssetID : Swift.Hashable {}
extension CloudXCore.NativeAdRequirements.NativeTitleAssetID : Swift.RawRepresentable {}
extension CloudXCore.NativeAdRequirements.NativeVideoAssetID : Swift.Equatable {}
extension CloudXCore.NativeAdRequirements.NativeVideoAssetID : Swift.Hashable {}
extension CloudXCore.NativeAdRequirements.NativeVideoAssetID : Swift.RawRepresentable {}
extension CloudXCore.NativeAdRequirements.NativeAdType : Swift.Equatable {}
extension CloudXCore.NativeAdRequirements.NativeAdType : Swift.Hashable {}
extension CloudXCore.NativeAdRequirements.NativeAdContext : Swift.Equatable {}
extension CloudXCore.NativeAdRequirements.NativeAdContext : Swift.Hashable {}
extension CloudXCore.NativeAdRequirements.NativeAdContext : Swift.RawRepresentable {}
extension CloudXCore.NativeAdRequirements.PlacementType : Swift.Equatable {}
extension CloudXCore.NativeAdRequirements.PlacementType : Swift.Hashable {}
extension CloudXCore.NativeAdRequirements.PlacementType : Swift.RawRepresentable {}
extension CloudXCore.NativeAdRequirements.Asset.Img.ImageType : Swift.Equatable {}
extension CloudXCore.NativeAdRequirements.Asset.Img.ImageType : Swift.Hashable {}
extension CloudXCore.NativeAdRequirements.Asset.Img.ImageType : Swift.RawRepresentable {}
extension CloudXCore.NativeAdRequirements.Asset.Data.DataType : Swift.Equatable {}
extension CloudXCore.NativeAdRequirements.Asset.Data.DataType : Swift.Hashable {}
extension CloudXCore.NativeAdRequirements.Asset.Data.DataType : Swift.RawRepresentable {}
extension CloudXCore.CloudXError : Swift.Equatable {}
extension CloudXCore.CloudXError : Swift.Hashable {}
extension CloudXCore.CloudXError : Swift.RawRepresentable {}
