name: Release CloudXMetaAdapter

on:
  push:
    tags:
      - 'v*-meta'

jobs:
  release:
    runs-on: macos-latest
    permissions:
      contents: write

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      COCOAPODS_TRUNK_TOKEN: ${{ secrets.COCOAPODS_TOKEN_NEW }}

    steps:
      - name: ùî† Debug available Xcode versions
        run: ls -la /Applications/ | grep -i xcode

      - name: ùî† Switch to Xcode 16.1
        run: sudo xcode-select -s /Applications/Xcode_16.1.app

      - name: üóñ Checkout repo
        uses: actions/checkout@v4

      - name: ü§† Clean build artifacts
        run: |
          rm -rf build
          rm -rf ~/Library/Developer/Xcode/DerivedData

      - name: üõ† Install CocoaPods
        run: |
          sudo gem install cocoapods --no-document

      - name: üìã Debug Print CocoaPods version and env
        run: |
          pod --version
          pod env

      - name: üìã Debug Show trunk config file
        run: |
          if [ -f ~/.cocoapods/trunk/me.json ]; then
            cat ~/.cocoapods/trunk/me.json
          else
            echo "No trunk config file found."
          fi

      - name: üìã Debug pod trunk me
        run: pod trunk me || true

      - name: üî¢ Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          VERSION_NO_SUFFIX=${VERSION%-meta}
          echo "version=$VERSION_NO_SUFFIX" >> $GITHUB_OUTPUT
          echo "full_version=$GITHUB_REF_NAME" >> $GITHUB_OUTPUT

      - name: üìÄ Build static xcframework
        run: |
          cd adapter-meta
          bash build_frameworks.sh

      - name: üì¶ Rename framework with version
        run: |
          cd adapter-meta
          VERSION=${{ steps.version.outputs.version }}
          mv CloudXMetaAdapter.xcframework.zip CloudXMetaAdapter-v$VERSION.xcframework.zip

      - name: üî¢ Compute SwiftPM checksum
        id: checksum
        run: |
          cd adapter-meta
          VERSION=${{ steps.version.outputs.version }}
          CHECKSUM=$(swift package compute-checksum CloudXMetaAdapter-v$VERSION.xcframework.zip)
          echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT

      - name: üìù Update podspec and Package.swift
        run: |
          cd adapter-meta
          VERSION=${{ steps.version.outputs.version }}
          FULL_VERSION=${{ steps.version.outputs.full_version }}
          
          # Update podspec version
          sed -i '' "s/s\.version.*=.*/s.version = '$VERSION'/" CloudXMetaAdapter.podspec
          
          # Fix podspec source URL to point to correct version
          sed -i '' "s|https://github.com/cloudx-io/cloudx-ios/releases/download/.*CloudXMetaAdapter-v.*\.xcframework\.zip|https://github.com/cloudx-io/cloudx-ios/releases/download/${FULL_VERSION}/CloudXMetaAdapter-v${VERSION}.xcframework.zip|" CloudXMetaAdapter.podspec
          
          # Fix license path relative to podspec directory  
          sed -i '' "s|'adapter-meta/LICENSE'|'LICENSE'|" CloudXMetaAdapter.podspec
          
          # Update root Package.swift version and checksum for CloudXMetaAdapter binary target
          cd ..
          sed -i '' "s|url: \".*CloudXMetaAdapter.*\",|url: \"https://github.com/cloudx-io/cloudx-ios/releases/download/$FULL_VERSION/CloudXMetaAdapter-v$VERSION.xcframework.zip\",|" Package.swift
          sed -i '' "s|checksum: \".*\"|checksum: \"${{ steps.checksum.outputs.checksum }}\"|" Package.swift

      - name: üìä Create GitHub release (step 1 - empty release)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.version.outputs.version }}
          FULL_VERSION=${{ steps.version.outputs.full_version }}
          
          # Create release notes file
          cat > release_notes.md << EOF
          CloudXMetaAdapter v$VERSION SDK release (static xcframework)
          
          ## Installation
          
          ### CocoaPods
          Add to your Podfile: pod 'CloudXMetaAdapter', '~> $VERSION'
          
          ### Swift Package Manager
          Add repository: https://github.com/cloudx-io/cloudx-ios
          
          ### Manual Installation
          Download CloudXMetaAdapter-v$VERSION.xcframework.zip from this release.
          
          ## SwiftPM Checksum
          ${{ steps.checksum.outputs.checksum }}
          EOF
          
          # Create empty release first (two-step process for better CDN propagation)
          gh release create "$FULL_VERSION" \
            --title "CloudXMetaAdapter v$VERSION" \
            --notes-file release_notes.md \
            --latest

      - name: üì¶ Upload xcframework to release (step 2 - file upload)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.version.outputs.version }}
          FULL_VERSION=${{ steps.version.outputs.full_version }}
          
          # Upload the xcframework file to the existing release
          gh release upload "$FULL_VERSION" \
            adapter-meta/CloudXMetaAdapter-v$VERSION.xcframework.zip


      - name: üîç Debug file structure
        run: |
          echo "=== Repository structure ==="
          ls -la
          echo "=== Adapter-meta directory ==="
          ls -la adapter-meta/
          echo "=== License file check ==="
          if [ -f "adapter-meta/LICENSE" ]; then
            echo "‚úÖ LICENSE file found at adapter-meta/LICENSE"
            wc -l adapter-meta/LICENSE
          else
            echo "‚ùå LICENSE file NOT found at adapter-meta/LICENSE"
          fi

      - name: üß™ Validate podspec with detailed output
        run: |
          cd adapter-meta
          echo "=== Validating CloudXMetaAdapter.podspec ==="
          echo "Current directory: $(pwd)"
          echo "Podspec content:"
          cat CloudXMetaAdapter.podspec
          echo "=== Running podspec validation ==="
          pod spec lint CloudXMetaAdapter.podspec --allow-warnings --skip-import-validation --skip-tests --verbose || {
            echo "‚ùå Podspec validation failed"
            exit 1
          }

      - name: üìã Verify CocoaPods authentication
        run: |
          if [ -z "${COCOAPODS_TRUNK_TOKEN:-}" ]; then
            echo "‚ùå COCOAPODS_TRUNK_TOKEN is empty/unset"
            exit 1
          else
            echo "‚úÖ COCOAPODS_TRUNK_TOKEN is set (length: ${#COCOAPODS_TRUNK_TOKEN})"
          fi
          echo "=== Checking authentication ==="
          pod trunk me || true
          echo "=== Checking pod ownership ==="
          pod trunk info CloudXMetaAdapter || true

      - name: üì§ Push podspec to CocoaPods trunk
        working-directory: adapter-meta
        run: |
          # Use ONLY environment variable - no file conflicts
          for i in {1..5}; do
            echo "=== Attempt $i/5 ==="
            if pod trunk push CloudXMetaAdapter.podspec --allow-warnings --skip-import-validation --skip-tests --verbose; then
              echo "‚úÖ Pod trunk push succeeded on attempt $i"
              break
            else
              echo "‚ùå Pod trunk push failed on attempt $i"
              if [ $i -lt 5 ]; then
                echo "Retrying in 30 seconds..."
                sleep 30
              else
                echo "‚ùå Pod trunk push failed after all retries"
                exit 1
              fi
            fi
          done

      - name: üßæ Verify successful pod trunk push
        run: |
          echo "=== Verifying pod trunk push success ==="
          
          # Wait a moment for CocoaPods to process
          sleep 10
          
          # Verify the pod is available
          if pod trunk info CloudXMetaAdapter; then
            echo "‚úÖ Pod trunk push verification successful"
            
            # Extract and display the latest version
            LATEST_VERSION=$(pod trunk info CloudXMetaAdapter | grep -E "^\s*-\s*[0-9]" | head -1 | sed 's/^\s*-\s*//')
            echo "Latest published version: $LATEST_VERSION"
            
            # Verify it matches our expected version
            EXPECTED_VERSION="${{ steps.version.outputs.version }}"
            if [[ "$LATEST_VERSION" == "$EXPECTED_VERSION" ]]; then
              echo "‚úÖ Version verification successful: $LATEST_VERSION matches expected $EXPECTED_VERSION"
            else
              echo "‚ö†Ô∏è Version mismatch: Latest=$LATEST_VERSION, Expected=$EXPECTED_VERSION"
              echo "This might be expected if the version was already published"
            fi
          else
            echo "‚ùå Pod trunk info failed - pod may not be properly published"
            exit 1
          fi

      - name: üìå Upload xcodebuild logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: xcodebuild-logs
          path: |
            adapter-meta/xcodebuild-ios.log
            adapter-meta/xcodebuild-sim.log 